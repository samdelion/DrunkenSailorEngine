#pragma once

#include "engine/system/ISystem.h"

namespace ds
{
/**
* Class used to manage all physics objects in the world.
*/
class PhysicsWorld : public ISystem
{
public:
    /**
     * Initialize the physics world.
     *
     * @param   config  const Config &, configuration loaded by the engine.
     * @return          bool, TRUE if initialization succeeds, FALSE otherwise.
     */
    virtual bool Initialize(const Config &config);

    /**
     * Update the physics system and all objects in the world.
     *
     * @param  deltaTime  float, timestep to update over.
     */
    virtual void Update(float deltaTime);

    /**
     * Shutdown the system.
     */
    virtual void Shutdown();

    /**
     * Give messages to the physics system.
     *
     * Messages are not handled in this method. Handling of events is deferred
     * to the Update method.
     *
     * @param  messages  const ds_msg::MessageStream &messages, messages to send
     * to the Message Bus.
     */
    virtual void PostMessages(const ds_msg::MessageStream &messages);

    /**
     * Collect messages generated by the physics system.
     *
     * @return  ds_msg::MessageStream, stream of messages generated by this
     * system.
     */
    virtual ds_msg::MessageStream CollectMessages();

    /**
     * Return PhysicsWorld script bindings.
     *
     * @return  ScriptBindingSet, script bindings.
     */
    virtual ScriptBindingSet GetScriptBindings() const;

    /**
     * Collide with and slide along physics world (ellipsoid-triangle
     * collision).
     *
     * New position and velocity returned by reference.
     *
     * @param  position  ds_math::Vector3 *, pointer to position of object. Will
     * return new position here.
     * @param  velocity  ds_math::Vector3 *, pointer to velocity of object. Will
     * return new velocity here.
     * @param  ellipsoidRadius  ds_math::Vector3, ellipsoid x,y,z radius.
     */
    void CollideAndSlide(ds_math::Vector3 *position,
                         ds_math::Vector3 *velocity,
                         ds_math::Vector3 ellipsoidRadius);

private:
    struct CollisionPacket
    {
        Vector3 eRadius; // Ellipsoid radius

        // Information about the move being requested (in R3 world space)
        Vector3 r3Velocity;
        Vector3 r3Position;

        // Information about the move being requested (in ellipsoid space)
        Vector3 eVelocity;
        Vector3 eNormalizedVelocity;
        Vector3 eBasePoint;

        // Hit information (in ellipsoid space!)
        bool foundCollision;
        double eNearestDistance;    // Note: ellipsoid space
        Vector3 eIntersectionPoint; // Note: ellipsoid space
    };

    /**
     * Process messages in the given message stream.
     *
     * @param  ds_msg::MessageStream *, messages to process.
     */
    void ProcessEvents(ds_msg::MessageStream *messages);

    ds_msg::MessageStream m_messagesGenerated, m_messagesReceived;
};
}
